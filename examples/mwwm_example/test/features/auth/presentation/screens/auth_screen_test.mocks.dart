// Mocks generated by Mockito 5.0.13 from annotations
// in mwwm_example/test/features/auth/presentation/screens/auth_screen_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:flutter/cupertino.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mwwm/mwwm.dart' as _i4;
import 'package:mwwm_example/features/auth/domain/usecases/authenticate_user.dart'
    as _i3;
import 'package:mwwm_example/features/auth/presentation/wms/auth_screen_wm.dart'
    as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeTextEditingController extends _i1.Fake
    implements _i2.TextEditingController {}

class _FakeAuthenticateUser extends _i1.Fake implements _i3.AuthenticateUser {}

class _FakeNavigatorState extends _i1.Fake implements _i2.NavigatorState {
  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeModel extends _i1.Fake implements _i4.Model {}

class _FakeStreamSubscription<T> extends _i1.Fake
    implements _i5.StreamSubscription<T> {}

/// A class which mocks [AuthScreenWidgetModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthScreenWidgetModel extends _i1.Mock
    implements _i6.AuthScreenWidgetModel {
  MockAuthScreenWidgetModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TextEditingController get loginController => (super.noSuchMethod(
      Invocation.getter(#loginController),
      returnValue: _FakeTextEditingController()) as _i2.TextEditingController);
  @override
  _i2.TextEditingController get passwordController => (super.noSuchMethod(
      Invocation.getter(#passwordController),
      returnValue: _FakeTextEditingController()) as _i2.TextEditingController);
  @override
  _i3.AuthenticateUser get authenticateUser =>
      (super.noSuchMethod(Invocation.getter(#authenticateUser),
          returnValue: _FakeAuthenticateUser()) as _i3.AuthenticateUser);
  @override
  set authenticateUser(_i3.AuthenticateUser? _authenticateUser) => super
      .noSuchMethod(Invocation.setter(#authenticateUser, _authenticateUser),
          returnValueForMissingStub: null);
  @override
  _i2.NavigatorState get navigator =>
      (super.noSuchMethod(Invocation.getter(#navigator),
          returnValue: _FakeNavigatorState()) as _i2.NavigatorState);
  @override
  set navigator(_i2.NavigatorState? _navigator) =>
      super.noSuchMethod(Invocation.setter(#navigator, _navigator),
          returnValueForMissingStub: null);
  @override
  _i5.Stream<bool> get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading),
          returnValue: Stream<bool>.empty()) as _i5.Stream<bool>);
  @override
  _i4.Model get model =>
      (super.noSuchMethod(Invocation.getter(#model), returnValue: _FakeModel())
          as _i4.Model);
  @override
  void onLoad() => super.noSuchMethod(Invocation.method(#onLoad, []),
      returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i5.Future<void> authenticate() =>
      (super.noSuchMethod(Invocation.method(#authenticate, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void onBind() => super.noSuchMethod(Invocation.method(#onBind, []),
      returnValueForMissingStub: null);
  @override
  _i5.StreamSubscription<T> subscribe<T>(
          _i5.Stream<T>? stream, void Function(T)? onValue,
          {void Function(Object)? onError}) =>
      (super.noSuchMethod(
          Invocation.method(#subscribe, [stream, onValue], {#onError: onError}),
          returnValue:
              _FakeStreamSubscription<T>()) as _i5.StreamSubscription<T>);
  @override
  _i5.StreamSubscription<T> subscribeHandleError<T>(
          _i5.Stream<T>? stream, void Function(T)? onValue,
          {void Function(Object)? onError}) =>
      (super.noSuchMethod(
          Invocation.method(
              #subscribeHandleError, [stream, onValue], {#onError: onError}),
          returnValue:
              _FakeStreamSubscription<T>()) as _i5.StreamSubscription<T>);
  @override
  void doFuture<T>(_i5.Future<T>? future, void Function(T)? onValue,
          {void Function(Object)? onError}) =>
      super.noSuchMethod(
          Invocation.method(#doFuture, [future, onValue], {#onError: onError}),
          returnValueForMissingStub: null);
  @override
  void doFutureHandleError<T>(_i5.Future<T>? future, void Function(T)? onValue,
          {void Function(Object)? onError}) =>
      super.noSuchMethod(
          Invocation.method(
              #doFutureHandleError, [future, onValue], {#onError: onError}),
          returnValueForMissingStub: null);
  @override
  void handleError(Object? e) =>
      super.noSuchMethod(Invocation.method(#handleError, [e]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
